name: Build for PyPI

on:
  workflow_dispatch:
    inputs:
      upload_to_pypi:
        description: 'Upload to PyPI (requires PYPI_TOKEN secret)'
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Build for PyPI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install maturin
      run: pip install maturin[patchelf]

    - name: Build wheels
      run: maturin build --release --out dist

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: dist/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install build dependencies
      run: pip install build

    - name: Build source distribution
      run: python -m build --sdist

    - name: Upload source distribution
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  upload-to-pypi:
    name: Upload to PyPI
    runs-on: ubuntu-latest
    needs: [build, build-sdist]
    if: github.event.inputs.upload_to_pypi == 'true'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Prepare PyPI assets
      run: |
        mkdir pypi-assets
        # Copy wheels from all platforms
        find . -name "*.whl" -exec cp {} pypi-assets/ \;
        # Copy source distribution
        find . -name "*.tar.gz" -exec cp {} pypi-assets/ \;
        
        # List all assets
        echo "PyPI assets:"
        ls -la pypi-assets/

    - name: Install twine
      run: pip install twine

    - name: Check package
      run: twine check pypi-assets/*

    - name: Upload to PyPI
      run: twine upload pypi-assets/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  test-pypi-install:
    name: Test PyPI Installation
    runs-on: ubuntu-latest
    needs: [build, build-sdist]
    if: github.event.inputs.upload_to_pypi == 'true'

    steps:
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Test installation from PyPI
      run: |
        pip install fast-exif-reader
        fast-exif-cli --version
        python -c "from fast_exif_reader import FastExifReader; print('PyPI installation successful')"
