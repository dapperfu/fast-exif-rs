name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.3.5)'
        required: true
        default: 'v0.3.5'

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install maturin
      run: pip install maturin[patchelf]

    - name: Build wheels
      run: maturin build --release --out dist

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}
        path: dist/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install build dependencies
      run: pip install build

    - name: Build source distribution
      run: python -m build --sdist

    - name: Upload source distribution
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: dist/*.tar.gz

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Display structure of downloaded files
      run: ls -la

    - name: Prepare release assets
      run: |
        mkdir release-assets
        # Copy wheels from all platforms
        find . -name "*.whl" -exec cp {} release-assets/ \;
        # Copy source distribution
        find . -name "*.tar.gz" -exec cp {} release-assets/ \;
        
        # List all assets
        echo "Release assets:"
        ls -la release-assets/

    - name: Get tag name
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: Release ${{ steps.get_tag.outputs.tag }}
        body: |
          ## Fast EXIF Reader ${{ steps.get_tag.outputs.tag }}
          
          ### Installation
          
          **Wheel (recommended):**
          ```bash
          pip install fast_exif_reader
          ```
          
          **From source:**
          ```bash
          pip install fast_exif_reader --no-binary fast_exif_reader
          ```
          
          ### What's New
          
          - High-performance EXIF metadata reader built in Rust
          - Optimized for Canon 70D and Nikon Z50 II cameras
          - Supports RAW, HEIF, and JPEG formats
          - Command-line interface included
          - Multiprocessing support for batch processing
          
          ### Files
          
          - **Wheels**: Pre-compiled packages for Linux, Windows, and macOS
          - **Source**: Source distribution for custom builds
          
          ### Usage
          
          ```python
          from fast_exif_reader import FastExifReader
          
          reader = FastExifReader()
          metadata = reader.read_file("image.jpg")
          print(metadata["Make"])
          ```
          
          ```bash
          fast-exif-cli --help
          ```
        files: release-assets/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-installation:
    name: Test Installation
    runs-on: ubuntu-latest
    needs: [build-wheels]

    steps:
    - uses: actions/checkout@v4

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: wheels-ubuntu-latest

    - name: Install wheel
      run: pip install dist/*.whl

    - name: Test CLI
      run: |
        fast-exif-cli --version
        fast-exif-cli --help

    - name: Test Python import
      run: |
        python -c "from fast_exif_reader import FastExifReader; print('Import successful')"
        python -c "import fast_exif_reader; print('Version:', fast_exif_reader.__version__)"
